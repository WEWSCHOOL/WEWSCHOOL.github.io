diff --git a/server/connecthand.c b/server/connecthand.c
index d74f178..1f16013 100644
--- a/server/connecthand.c
+++ b/server/connecthand.c
@@ -50,6 +50,11 @@
 #include "stdinhand.h"
 #include "voting.h"
 
+#include "astring.h"
+#include "research.h"
+#include "techtools.h"
+#include "rand.h"
+
 #include "connecthand.h"
 
 
@@ -102,6 +107,36 @@ static void restore_access_level(struct connection *pconn)
   conn_set_access(pconn, level, FALSE);
 }
 
+/****************************************************************************
+...
+****************************************************************************/
+static void do_longturn_tech_latejoiner_effect(struct player *pplayer)
+{
+  struct research *presearch;
+  
+  int mod = 35;
+  int num_players;
+
+  
+  presearch = research_get(pplayer);
+  advance_index_iterate(A_FIRST, ptech) {
+    if (presearch != NULL && TECH_KNOWN == research_invention_state(presearch, ptech)) {
+      continue;
+    }
+
+    num_players = 0;
+    players_iterate(aplayer) {
+      if (TECH_KNOWN == research_invention_state(research_get(aplayer), ptech)) {
+        if (mod <= ++num_players) {
+          found_new_tech(presearch, ptech, FALSE, TRUE);		
+	  break;
+        }
+      }
+    } players_iterate_end;
+  } advance_index_iterate_end;
+
+}
+
 /**************************************************************************
   This is used when a new player joins a server, before the game
   has started.  If pconn is NULL, is an AI, else a client.
@@ -251,6 +286,23 @@ void establish_new_connection(struct connection *pconn)
     notify_conn(dest, NULL, E_CONNECTION, ftc_server,
 		_("You are logged in as '%s' connected to no player."),
                 pconn->username);
+
+    if (is_longturn()) {
+      pplayer = find_uncontrolled_player();
+      if (pplayer) {
+        /* Make it human! */
+        set_as_human(pplayer);
+        pplayer->economic.gold += game.info.turn * 10; if (pplayer->economic.gold > 700) pplayer->economic.gold = 700;
+        pplayer->economic.science = 60;
+        pplayer->economic.tax = 40;
+        connection_attach(pconn, pplayer, FALSE);
+        do_longturn_tech_latejoiner_effect(pplayer);
+      } else {
+        notify_conn(dest, NULL, E_CONNECTION, ftc_server,
+           _("Unable to join LongTurn game. The game is probably full."));
+      }
+    }
+
   } else {
     notify_conn(dest, NULL, E_CONNECTION, ftc_server,
 		_("You are logged in as '%s' connected to %s."),
@@ -540,8 +592,15 @@ void send_conn_info_remove(struct conn_list *src, struct conn_list *dest)
 struct player *find_uncontrolled_player(void)
 {
   players_iterate(played) {
-    if (!played->is_connected && !played->was_created) {
-      return played;
+    if (!is_longturn()) {
+      if (!played->is_connected && !played->was_created) {
+        return played;
+      }
+    } else {
+      if (((!played->is_connected && !played->was_created && played->unassigned_user && played->is_alive) 
+          || (played->is_alive && played->nturns_idle > 12 )) && !player_delegation_active(played) && strlen(played->server.delegate_to) == 0) {
+        return played;
+      }
     }
   } players_iterate_end;
 
@@ -615,6 +674,9 @@ static bool connection_attach_real(struct connection *pconn,
       }
       (void) aifill(game.info.aifill);
     }
+    if (is_longturn()) {
+      server_player_set_name(pplayer, pconn->username);
+    }
 
     if (game.server.auto_ai_toggle && !is_human(pplayer)) {
       toggle_ai_player_direct(NULL, pplayer);
diff --git a/server/settings.c b/server/settings.c
index 0d7605f..ab7fa7b 100644
--- a/server/settings.c
+++ b/server/settings.c
@@ -755,6 +755,8 @@ static void topology_action(const struct setting *pset)
 *************************************************************************/
 static void metamessage_action(const struct setting *pset)
 {
+  if (is_longturn() && S_S_RUNNING == server_state())  return;
+
   /* Set the metaserver message based on the new meta server user message.
    * An empty user metaserver message results in an automatic meta message.
    * A non empty user meta message results in the user meta message. */
diff --git a/server/srv_main.c b/server/srv_main.c
index a9d14cb..06e0598 100644
--- a/server/srv_main.c
+++ b/server/srv_main.c
@@ -3137,6 +3137,15 @@ static void srv_ready(void)
         map_show_all(pplayer);
       } players_iterate_end;
     }
+
+    if (is_longturn()) {
+      players_iterate(pplayer) {
+        if (is_ai(pplayer)) {
+          set_as_human(pplayer);
+	  server_player_set_name(pplayer, "New Available Player ");
+	}
+      } players_iterate_end;	    
+    }
   }
 
   if (game.scenario.is_scenario && game.scenario.players) {
@@ -3501,3 +3510,11 @@ static struct rgbcolor *mapimg_server_plrcolor_get(int i)
 {
   return playercolor_get(i);
 }
+
+/**************************************************************************
+ Is this a LongTurn game? 
+**************************************************************************/
+bool is_longturn(void)
+{
+  return (fc_strcasecmp(game.server.meta_info.type, "longturn") == 0);
+}
diff --git a/server/srv_main.h b/server/srv_main.h
index 3379031..cef131c 100644
--- a/server/srv_main.h
+++ b/server/srv_main.h
@@ -93,6 +93,7 @@ void srv_init(void);
 void srv_main(void);
 void server_quit(void);
 void save_game_auto(const char *save_reason, enum autosave_type type);
+bool is_longturn(void);
 
 enum server_states server_state(void);
 void set_server_state(enum server_states newstate);
diff --git a/server/stdinhand.c b/server/stdinhand.c
index faa1d20..add5d62 100644
--- a/server/stdinhand.c
+++ b/server/stdinhand.c
@@ -599,6 +599,8 @@ static bool metamessage_command(struct connection *caller,
 {
   struct setting *pset;
 
+  if (is_longturn() && S_S_RUNNING == server_state())  return FALSE;
+
   if (check) {
     return TRUE;
   }
@@ -686,6 +688,8 @@ void toggle_ai_player_direct(struct connection *caller, struct player *pplayer)
 {
   fc_assert_ret(pplayer != NULL);
 
+  if (is_longturn() && S_S_RUNNING == server_state())  return;
+
   if (is_human(pplayer)) {
     cmd_reply(CMD_AITOGGLE, caller, C_OK,
 	      _("%s is now under AI control."),
@@ -712,6 +716,8 @@ static bool toggle_ai_command(struct connection *caller, char *arg, bool check)
   enum m_pre_result match_result;
   struct player *pplayer;
 
+  if (is_longturn() && S_S_RUNNING == server_state()) return FALSE;
+
   pplayer = player_by_name_prefix(arg, &match_result);
 
   if (!pplayer) {
